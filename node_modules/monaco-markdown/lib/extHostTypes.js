"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WorkspaceEdit = exports.TextEditorSelectionChangeKind = exports.TextEditorRevealType = exports.TextEdit = exports.SnippetString = exports.Selection = exports.Range = exports.Position = exports.EndOfLine = void 0;
exports.values = values;

var _errors = require("./errors");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// export function values<V = any>(set: Set<V>): V[];
// export function values<K = any, V = any>(map: Map<K, V>): V[];
function values(forEachable) {
  var result = [];
  forEachable.forEach(function (value) {
    return result.push(value);
  });
  return result;
}

var Position = /*#__PURE__*/function () {
  function Position(line, character) {
    _classCallCheck(this, Position);

    if (line < 0) {
      throw (0, _errors.illegalArgument)('line must be non-negative');
    }

    if (character < 0) {
      throw (0, _errors.illegalArgument)('character must be non-negative');
    }

    this._line = line;
    this._character = character;
  }

  _createClass(Position, [{
    key: "line",
    get: function get() {
      return this._line;
    }
  }, {
    key: "character",
    get: function get() {
      return this._character;
    }
  }, {
    key: "isBefore",
    value: function isBefore(other) {
      if (this._line < other._line) {
        return true;
      }

      if (other._line < this._line) {
        return false;
      }

      return this._character < other._character;
    }
  }, {
    key: "isBeforeOrEqual",
    value: function isBeforeOrEqual(other) {
      if (this._line < other._line) {
        return true;
      }

      if (other._line < this._line) {
        return false;
      }

      return this._character <= other._character;
    }
  }, {
    key: "isAfter",
    value: function isAfter(other) {
      return !this.isBeforeOrEqual(other);
    }
  }, {
    key: "isAfterOrEqual",
    value: function isAfterOrEqual(other) {
      return !this.isBefore(other);
    }
  }, {
    key: "isEqual",
    value: function isEqual(other) {
      return this._line === other._line && this._character === other._character;
    }
  }, {
    key: "compareTo",
    value: function compareTo(other) {
      if (this._line < other._line) {
        return -1;
      } else if (this._line > other.line) {
        return 1;
      } else {
        // equal line
        if (this._character < other._character) {
          return -1;
        } else if (this._character > other._character) {
          return 1;
        } else {
          // equal line and character
          return 0;
        }
      }
    }
  }, {
    key: "translate",
    value: function translate(lineDeltaOrChange) {
      var characterDelta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if (lineDeltaOrChange === null || characterDelta === null) {
        throw (0, _errors.illegalArgument)();
      }

      var lineDelta;

      if (typeof lineDeltaOrChange === 'undefined') {
        lineDelta = 0;
      } else if (typeof lineDeltaOrChange === 'number') {
        lineDelta = lineDeltaOrChange;
      } else {
        lineDelta = typeof lineDeltaOrChange.lineDelta === 'number' ? lineDeltaOrChange.lineDelta : 0;
        characterDelta = typeof lineDeltaOrChange.characterDelta === 'number' ? lineDeltaOrChange.characterDelta : 0;
      }

      if (lineDelta === 0 && characterDelta === 0) {
        return this;
      }

      return new Position(this.line + lineDelta, this.character + characterDelta);
    }
  }, {
    key: "with",
    value: function _with(lineOrChange) {
      var character = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.character;

      if (lineOrChange === null || character === null) {
        throw (0, _errors.illegalArgument)();
      }

      var line;

      if (typeof lineOrChange === 'undefined') {
        line = this.line;
      } else if (typeof lineOrChange === 'number') {
        line = lineOrChange;
      } else {
        line = typeof lineOrChange.line === 'number' ? lineOrChange.line : this.line;
        character = typeof lineOrChange.character === 'number' ? lineOrChange.character : this.character;
      }

      if (line === this.line && character === this.character) {
        return this;
      }

      return new Position(line, character);
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        line: this.line,
        character: this.character
      };
    }
  }], [{
    key: "Min",
    value: function Min() {
      if (arguments.length === 0) {
        throw new TypeError();
      }

      var result = arguments.length <= 0 ? undefined : arguments[0];

      for (var i = 1; i < arguments.length; i++) {
        var p = i < 0 || arguments.length <= i ? undefined : arguments[i];

        if (p.isBefore(result)) {
          result = p;
        }
      }

      return result;
    }
  }, {
    key: "Max",
    value: function Max() {
      if (arguments.length === 0) {
        throw new TypeError();
      }

      var result = arguments.length <= 0 ? undefined : arguments[0];

      for (var i = 1; i < arguments.length; i++) {
        var p = i < 0 || arguments.length <= i ? undefined : arguments[i];

        if (p.isAfter(result)) {
          result = p;
        }
      }

      return result;
    }
  }, {
    key: "isPosition",
    value: function isPosition(other) {
      if (!other) {
        return false;
      }

      if (other instanceof Position) {
        return true;
      }

      var _ref = other,
          line = _ref.line,
          character = _ref.character;

      if (typeof line === 'number' && typeof character === 'number') {
        return true;
      }

      return false;
    }
  }]);

  return Position;
}();

exports.Position = Position;

var Range = /*#__PURE__*/function () {
  function Range(startLineOrStart, startColumnOrEnd, endLine, endColumn) {
    _classCallCheck(this, Range);

    var start;
    var end;

    if (typeof startLineOrStart === 'number' && typeof startColumnOrEnd === 'number' && typeof endLine === 'number' && typeof endColumn === 'number') {
      start = new Position(startLineOrStart, startColumnOrEnd);
      end = new Position(endLine, endColumn);
    } else if (startLineOrStart instanceof Position && startColumnOrEnd instanceof Position) {
      start = startLineOrStart;
      end = startColumnOrEnd;
    }

    if (!start || !end) {
      throw new Error('Invalid arguments');
    }

    if (start.isBefore(end)) {
      this._start = start;
      this._end = end;
    } else {
      this._start = end;
      this._end = start;
    }
  }

  _createClass(Range, [{
    key: "start",
    get: function get() {
      return this._start;
    }
  }, {
    key: "end",
    get: function get() {
      return this._end;
    }
  }, {
    key: "contains",
    value: function contains(positionOrRange) {
      if (positionOrRange instanceof Range) {
        return this.contains(positionOrRange._start) && this.contains(positionOrRange._end);
      } else if (positionOrRange instanceof Position) {
        if (positionOrRange.isBefore(this._start)) {
          return false;
        }

        if (this._end.isBefore(positionOrRange)) {
          return false;
        }

        return true;
      }

      return false;
    }
  }, {
    key: "isEqual",
    value: function isEqual(other) {
      return this._start.isEqual(other._start) && this._end.isEqual(other._end);
    }
  }, {
    key: "intersection",
    value: function intersection(other) {
      var start = Position.Max(other.start, this._start);
      var end = Position.Min(other.end, this._end);

      if (start.isAfter(end)) {
        // this happens when there is no overlap:
        // |-----|
        //          |----|
        return undefined;
      }

      return new Range(start, end);
    }
  }, {
    key: "union",
    value: function union(other) {
      if (this.contains(other)) {
        return this;
      } else if (other.contains(this)) {
        return other;
      }

      var start = Position.Min(other.start, this._start);
      var end = Position.Max(other.end, this.end);
      return new Range(start, end);
    }
  }, {
    key: "isEmpty",
    get: function get() {
      return this._start.isEqual(this._end);
    }
  }, {
    key: "isSingleLine",
    get: function get() {
      return this._start.line === this._end.line;
    }
  }, {
    key: "with",
    value: function _with(startOrChange) {
      var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.end;

      if (startOrChange === null || end === null) {
        throw (0, _errors.illegalArgument)();
      }

      var start;

      if (!startOrChange) {
        start = this.start;
      } else if (Position.isPosition(startOrChange)) {
        start = startOrChange;
      } else {
        start = startOrChange.start || this.start;
        end = startOrChange.end || this.end;
      }

      if (start.isEqual(this._start) && end.isEqual(this.end)) {
        return this;
      }

      return new Range(start, end);
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return [this.start, this.end];
    }
  }], [{
    key: "isRange",
    value: function isRange(thing) {
      if (thing instanceof Range) {
        return true;
      }

      if (!thing) {
        return false;
      }

      return Position.isPosition(thing.start) && Position.isPosition(thing.end);
    }
  }]);

  return Range;
}();

exports.Range = Range;

var Selection = /*#__PURE__*/function (_Range) {
  _inherits(Selection, _Range);

  var _super = _createSuper(Selection);

  function Selection(anchorLineOrAnchor, anchorColumnOrActive, activeLine, activeColumn) {
    var _this;

    _classCallCheck(this, Selection);

    var anchor;
    var active;

    if (typeof anchorLineOrAnchor === 'number' && typeof anchorColumnOrActive === 'number' && typeof activeLine === 'number' && typeof activeColumn === 'number') {
      anchor = new Position(anchorLineOrAnchor, anchorColumnOrActive);
      active = new Position(activeLine, activeColumn);
    } else if (anchorLineOrAnchor instanceof Position && anchorColumnOrActive instanceof Position) {
      anchor = anchorLineOrAnchor;
      active = anchorColumnOrActive;
    }

    if (!anchor || !active) {
      throw new Error('Invalid arguments');
    }

    _this = _super.call(this, anchor, active);
    _this._anchor = anchor;
    _this._active = active;
    return _this;
  }

  _createClass(Selection, [{
    key: "anchor",
    get: function get() {
      return this._anchor;
    }
  }, {
    key: "active",
    get: function get() {
      return this._active;
    }
  }, {
    key: "isReversed",
    get: function get() {
      return this._anchor === this._end;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        start: this.start,
        end: this.end,
        active: this.active,
        anchor: this.anchor
      };
    }
  }], [{
    key: "isSelection",
    value: function isSelection(thing) {
      if (thing instanceof Selection) {
        return true;
      }

      if (!thing) {
        return false;
      }

      return Range.isRange(thing) && Position.isPosition(thing.anchor) && Position.isPosition(thing.active) && typeof thing.isReversed === 'boolean';
    }
  }]);

  return Selection;
}(Range);

exports.Selection = Selection;
var EndOfLine;
exports.EndOfLine = EndOfLine;

(function (EndOfLine) {
  EndOfLine[EndOfLine["LF"] = 1] = "LF";
  EndOfLine[EndOfLine["CRLF"] = 2] = "CRLF";
})(EndOfLine || (exports.EndOfLine = EndOfLine = {}));

var TextEdit = /*#__PURE__*/function () {
  function TextEdit(range, newText) {
    _classCallCheck(this, TextEdit);

    this.range = range;
    this._newText = newText;
  }

  _createClass(TextEdit, [{
    key: "range",
    get: function get() {
      return this._range;
    },
    set: function set(value) {
      if (value && !Range.isRange(value)) {
        throw (0, _errors.illegalArgument)('range');
      }

      this._range = value;
    }
  }, {
    key: "newText",
    get: function get() {
      return this._newText || '';
    },
    set: function set(value) {
      if (value && typeof value !== 'string') {
        throw (0, _errors.illegalArgument)('newText');
      }

      this._newText = value;
    }
  }, {
    key: "newEol",
    get: function get() {
      return this._newEol;
    },
    set: function set(value) {
      if (value && typeof value !== 'number') {
        throw (0, _errors.illegalArgument)('newEol');
      }

      this._newEol = value;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        range: this.range,
        newText: this.newText,
        newEol: this._newEol
      };
    }
  }], [{
    key: "isTextEdit",
    value: function isTextEdit(thing) {
      if (thing instanceof TextEdit) {
        return true;
      }

      if (!thing) {
        return false;
      }

      return Range.isRange(thing) && typeof thing.newText === 'string';
    }
  }, {
    key: "replace",
    value: function replace(range, newText) {
      return new TextEdit(range, newText);
    }
  }, {
    key: "insert",
    value: function insert(position, newText) {
      return TextEdit.replace(new Range(position, position), newText);
    }
  }, {
    key: "delete",
    value: function _delete(range) {
      return TextEdit.replace(range, '');
    }
  }, {
    key: "setEndOfLine",
    value: function setEndOfLine(eol) {
      var ret = new TextEdit(new Range(new Position(0, 0), new Position(0, 0)), '');
      ret.newEol = eol;
      return ret;
    }
  }]);

  return TextEdit;
}();

exports.TextEdit = TextEdit;

var WorkspaceEdit = /*#__PURE__*/function () {
  function WorkspaceEdit() {
    _classCallCheck(this, WorkspaceEdit);

    this._edits = new Array();
  }

  _createClass(WorkspaceEdit, [{
    key: "renameFile",
    value: function renameFile(from, to, options) {
      this._edits.push({
        _type: 1,
        from: from,
        to: to,
        options: options
      });
    }
  }, {
    key: "createFile",
    value: function createFile(uri, options) {
      this._edits.push({
        _type: 1,
        from: undefined,
        to: uri,
        options: options
      });
    }
  }, {
    key: "deleteFile",
    value: function deleteFile(uri, options) {
      this._edits.push({
        _type: 1,
        from: uri,
        to: undefined,
        options: options
      });
    }
  }, {
    key: "replace",
    value: function replace(uri, range, newText) {
      this._edits.push({
        _type: 2,
        uri: uri,
        edit: new TextEdit(range, newText)
      });
    }
  }, {
    key: "insert",
    value: function insert(resource, position, newText) {
      this.replace(resource, new Range(position, position), newText);
    }
  }, {
    key: "delete",
    value: function _delete(resource, range) {
      this.replace(resource, range, '');
    }
  }, {
    key: "has",
    value: function has(uri) {
      var _iterator = _createForOfIteratorHelper(this._edits),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var edit = _step.value;

          if (edit._type === 2 && edit.uri.toString() === uri.toString()) {
            return true;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return false;
    }
  }, {
    key: "set",
    value: function set(uri, edits) {
      if (!edits) {
        // remove all text edits for `uri`
        for (var i = 0; i < this._edits.length; i++) {
          var element = this._edits[i];

          if (element._type === 2 && element.uri.toString() === uri.toString()) {
            this._edits[i] = undefined; // will be coalesced down below
          }
        } // this._edits = coalesce(this._edits); TODO

      } else {
        // append edit to the end
        var _iterator2 = _createForOfIteratorHelper(edits),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var edit = _step2.value;

            if (edit) {
              this._edits.push({
                _type: 2,
                uri: uri,
                edit: edit
              });
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    }
  }, {
    key: "get",
    value: function get(uri) {
      var res = [];

      var _iterator3 = _createForOfIteratorHelper(this._edits),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var candidate = _step3.value;

          if (candidate._type === 2 && candidate.uri.toString() === uri.toString()) {
            res.push(candidate.edit);
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return res;
    }
  }, {
    key: "entries",
    value: function entries() {
      var textEdits = new Map();

      var _iterator4 = _createForOfIteratorHelper(this._edits),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var candidate = _step4.value;

          if (candidate._type === 2) {
            var textEdit = textEdits.get(candidate.uri.toString());

            if (!textEdit) {
              textEdit = [candidate.uri, []];
              textEdits.set(candidate.uri.toString(), textEdit);
            }

            textEdit[1].push(candidate.edit);
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      return values(textEdits);
    }
  }, {
    key: "_allEntries",
    value: function _allEntries() {
      var res = [];

      var _iterator5 = _createForOfIteratorHelper(this._edits),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var edit = _step5.value;

          if (edit._type === 1) {
            res.push([edit.from, edit.to, edit.options]);
          } else {
            res.push([edit.uri, [edit.edit]]);
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      return res;
    }
  }, {
    key: "size",
    get: function get() {
      return this.entries().length;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.entries();
    }
  }]);

  return WorkspaceEdit;
}();

exports.WorkspaceEdit = WorkspaceEdit;
var TextEditorRevealType;
exports.TextEditorRevealType = TextEditorRevealType;

(function (TextEditorRevealType) {
  TextEditorRevealType[TextEditorRevealType["Default"] = 0] = "Default";
  TextEditorRevealType[TextEditorRevealType["InCenter"] = 1] = "InCenter";
  TextEditorRevealType[TextEditorRevealType["InCenterIfOutsideViewport"] = 2] = "InCenterIfOutsideViewport";
  TextEditorRevealType[TextEditorRevealType["AtTop"] = 3] = "AtTop";
})(TextEditorRevealType || (exports.TextEditorRevealType = TextEditorRevealType = {}));

var TextEditorSelectionChangeKind;
exports.TextEditorSelectionChangeKind = TextEditorSelectionChangeKind;

(function (TextEditorSelectionChangeKind) {
  TextEditorSelectionChangeKind[TextEditorSelectionChangeKind["Keyboard"] = 1] = "Keyboard";
  TextEditorSelectionChangeKind[TextEditorSelectionChangeKind["Mouse"] = 2] = "Mouse";
  TextEditorSelectionChangeKind[TextEditorSelectionChangeKind["Command"] = 3] = "Command";
})(TextEditorSelectionChangeKind || (exports.TextEditorSelectionChangeKind = TextEditorSelectionChangeKind = {}));

var SnippetString = /*#__PURE__*/function () {
  function SnippetString(value) {
    _classCallCheck(this, SnippetString);

    this._tabstop = 1;
    this.value = value || '';
  }

  _createClass(SnippetString, [{
    key: "appendText",
    value: function appendText(string) {
      this.value += SnippetString._escape(string);
      return this;
    }
  }, {
    key: "appendTabstop",
    value: function appendTabstop() {
      var number = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._tabstop++;
      this.value += '$';
      this.value += number;
      return this;
    }
  }, {
    key: "appendPlaceholder",
    value: function appendPlaceholder(value) {
      var number = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._tabstop++;

      if (typeof value === 'function') {
        var nested = new SnippetString();
        nested._tabstop = this._tabstop;
        value(nested);
        this._tabstop = nested._tabstop;
        value = nested.value;
      } else {
        value = SnippetString._escape(value);
      }

      this.value += '${';
      this.value += number;
      this.value += ':';
      this.value += value;
      this.value += '}';
      return this;
    }
  }, {
    key: "appendVariable",
    value: function appendVariable(name, defaultValue) {
      if (typeof defaultValue === 'function') {
        var nested = new SnippetString();
        nested._tabstop = this._tabstop;
        defaultValue(nested);
        this._tabstop = nested._tabstop;
        defaultValue = nested.value;
      } else if (typeof defaultValue === 'string') {
        defaultValue = defaultValue.replace(/\$|}/g, '\\$&');
      }

      this.value += '${';
      this.value += name;

      if (defaultValue) {
        this.value += ':';
        this.value += defaultValue;
      }

      this.value += '}';
      return this;
    }
  }], [{
    key: "isSnippetString",
    value: function isSnippetString(thing) {
      if (thing instanceof SnippetString) {
        return true;
      }

      if (!thing) {
        return false;
      }

      return typeof thing.value === 'string';
    }
  }, {
    key: "_escape",
    value: function _escape(value) {
      return value.replace(/\$|}|\\/g, '\\$&');
    }
  }]);

  return SnippetString;
}();

exports.SnippetString = SnippetString;