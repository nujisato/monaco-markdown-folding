"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WorkspaceEdit = exports.Selection = exports.Range = exports.Position = exports.EndOfLine = void 0;

var _monacoEditor = require("monaco-editor");

var vscode = _interopRequireWildcard(require("./extHostTypes"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var Selection;
exports.Selection = Selection;

(function (_Selection2) {
  function to(selection) {
    var selectionStartLineNumber = selection.selectionStartLineNumber,
        selectionStartColumn = selection.selectionStartColumn,
        positionLineNumber = selection.positionLineNumber,
        positionColumn = selection.positionColumn;
    var start = new vscode.Position(selectionStartLineNumber - 1, selectionStartColumn - 1);
    var end = new vscode.Position(positionLineNumber - 1, positionColumn - 1);
    return new vscode.Selection(start, end);
  }

  _Selection2.to = to;

  function from(selection) {
    var anchor = selection.anchor,
        active = selection.active;
    return new _monacoEditor.Selection(anchor.line + 1, anchor.character + 1, active.line + 1, active.character + 1);
  }

  _Selection2.from = from;
})(Selection || (exports.Selection = Selection = {}));

var Range;
exports.Range = Range;

(function (_Range2) {
  function from(range) {
    if (!range) {
      return undefined;
    }

    var start = range.start,
        end = range.end;
    return new _monacoEditor.Range(start.line + 1, start.character + 1, end.line + 1, end.character + 1);
  }

  _Range2.from = from;

  function to(range) {
    if (!range) {
      return undefined;
    }

    var startLineNumber = range.startLineNumber,
        startColumn = range.startColumn,
        endLineNumber = range.endLineNumber,
        endColumn = range.endColumn;
    return new vscode.Range(startLineNumber - 1, startColumn - 1, endLineNumber - 1, endColumn - 1);
  }

  _Range2.to = to;
})(Range || (exports.Range = Range = {}));

var Position;
exports.Position = Position;

(function (_Position2) {
  function to(position) {
    return new vscode.Position(position.lineNumber - 1, position.column - 1);
  }

  _Position2.to = to;

  function from(position) {
    return {
      lineNumber: position.line + 1,
      column: position.character + 1
    };
  }

  _Position2.from = from;
})(Position || (exports.Position = Position = {}));

var EndOfLine;
exports.EndOfLine = EndOfLine;

(function (_EndOfLine) {
  function from(eol) {
    if (eol === vscode.EndOfLine.CRLF) {
      return _monacoEditor.editor.EndOfLineSequence.CRLF;
    } else if (eol === vscode.EndOfLine.LF) {
      return _monacoEditor.editor.EndOfLineSequence.LF;
    }

    return undefined;
  }

  _EndOfLine.from = from;

  function to(eol) {
    if (eol === _monacoEditor.editor.EndOfLineSequence.CRLF) {
      return vscode.EndOfLine.CRLF;
    } else if (eol === _monacoEditor.editor.EndOfLineSequence.LF) {
      return vscode.EndOfLine.LF;
    }

    return undefined;
  }

  _EndOfLine.to = to;
})(EndOfLine || (exports.EndOfLine = EndOfLine = {}));

var WorkspaceEdit;
exports.WorkspaceEdit = WorkspaceEdit;

(function (_WorkspaceEdit) {
  function from(value) {
    var edits = [];

    var _iterator = _createForOfIteratorHelper(value._allEntries()),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var entry = _step.value;

        var _entry = _slicedToArray(entry, 2),
            uri = _entry[0],
            uriOrEdits = _entry[1];

        if (Array.isArray(uriOrEdits)) {
          // text edits
          var _iterator2 = _createForOfIteratorHelper(uriOrEdits),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var e = _step2.value;
              edits.push({
                range: Range.from(e.range),
                text: e.newText,
                forceMoveMarkers: false
              });
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        } else {
          // resource edits
          throw new Error("Not implemented for " + uri);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return edits;
  }

  _WorkspaceEdit.from = from;
})(WorkspaceEdit || (exports.WorkspaceEdit = WorkspaceEdit = {}));