"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.USUAL_WORD_SEPARATORS = exports.DEFAULT_WORD_REGEXP = void 0;
exports.ensureValidWordDefinition = ensureValidWordDefinition;
exports.getWordAtText = getWordAtText;

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var USUAL_WORD_SEPARATORS = '`~!@#$%^&*()-=+[{]}\\|;:\'",.<>/?';
/**
 * Create a word definition regular expression based on default word separators.
 * Optionally provide allowed separators that should be included in words.
 *
 * The default would look like this:
 * /(-?\d*\.\d\w*)|([^\`\~\!\@\#\$\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g
 */

exports.USUAL_WORD_SEPARATORS = USUAL_WORD_SEPARATORS;

function createWordRegExp() {
  var allowInWords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var source = '(-?\\d*\\.\\d\\w*)|([^';

  var _iterator = _createForOfIteratorHelper(USUAL_WORD_SEPARATORS),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var sep = _step.value;

      if (allowInWords.indexOf(sep) >= 0) {
        continue;
      }

      source += '\\' + sep;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  source += '\\s]+)';
  return new RegExp(source, 'g');
} // catches numbers (including floating numbers) in the first group, and alphanum in the second


var DEFAULT_WORD_REGEXP = createWordRegExp();
exports.DEFAULT_WORD_REGEXP = DEFAULT_WORD_REGEXP;

function ensureValidWordDefinition(wordDefinition) {
  var result = DEFAULT_WORD_REGEXP;

  if (wordDefinition && wordDefinition instanceof RegExp) {
    if (!wordDefinition.global) {
      var flags = 'g';

      if (wordDefinition.ignoreCase) {
        flags += 'i';
      }

      if (wordDefinition.multiline) {
        flags += 'm';
      }

      if (wordDefinition.unicode) {
        flags += 'u';
      }

      result = new RegExp(wordDefinition.source, flags);
    } else {
      result = wordDefinition;
    }
  }

  result.lastIndex = 0;
  return result;
}

function getWordAtPosFast(column, wordDefinition, text, textOffset) {
  // find whitespace enclosed text around column and match from there
  var pos = column - 1 - textOffset;
  var start = text.lastIndexOf(' ', pos - 1) + 1;
  wordDefinition.lastIndex = start;
  var match;

  while (match = wordDefinition.exec(text)) {
    var matchIndex = match.index || 0;

    if (matchIndex <= pos && wordDefinition.lastIndex >= pos) {
      return {
        word: match[0],
        startColumn: textOffset + 1 + matchIndex,
        endColumn: textOffset + 1 + wordDefinition.lastIndex
      };
    }
  }

  return null;
}

function getWordAtPosSlow(column, wordDefinition, text, textOffset) {
  // matches all words starting at the beginning
  // of the input until it finds a match that encloses
  // the desired column. slow but correct
  var pos = column - 1 - textOffset;
  wordDefinition.lastIndex = 0;
  var match;

  while (match = wordDefinition.exec(text)) {
    var matchIndex = match.index || 0;

    if (matchIndex > pos) {
      // |nW -> matched only after the pos
      return null;
    } else if (wordDefinition.lastIndex >= pos) {
      // W|W -> match encloses pos
      return {
        word: match[0],
        startColumn: textOffset + 1 + matchIndex,
        endColumn: textOffset + 1 + wordDefinition.lastIndex
      };
    }
  }

  return null;
}

function getWordAtText(column, wordDefinition, text, textOffset) {
  // if `words` can contain whitespace character we have to use the slow variant
  // otherwise we use the fast variant of finding a word
  wordDefinition.lastIndex = 0;
  var match = wordDefinition.exec(text);

  if (!match) {
    return null;
  } // todo@joh the `match` could already be the (first) word


  var ret = match[0].indexOf(' ') >= 0 // did match a word which contains a space character -> use slow word find
  ? getWordAtPosSlow(column, wordDefinition, text, textOffset) // sane word definition -> use fast word find
  : getWordAtPosFast(column, wordDefinition, text, textOffset); // both (getWordAtPosFast and getWordAtPosSlow) leave the wordDefinition-RegExp
  // in an undefined state and to not confuse other users of the wordDefinition
  // we reset the lastIndex

  wordDefinition.lastIndex = 0;
  return ret;
}