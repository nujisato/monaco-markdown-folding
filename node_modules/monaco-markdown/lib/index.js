"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MonacoMarkdownExtension = void 0;

var _formatting = require("./formatting");

var _vscodeMonaco = require("./vscode-monaco");

var _listEditing = require("./listEditing");

var _completion = require("./completion");

var _tableFormatter = require("./tableFormatter");

var _markdown = require("./markdown.contribution");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var MonacoMarkdownExtension = /*#__PURE__*/function () {
  function MonacoMarkdownExtension() {
    _classCallCheck(this, MonacoMarkdownExtension);
  }

  _createClass(MonacoMarkdownExtension, [{
    key: "activate",
    value: function activate(editor) {
      var textEditor = new _vscodeMonaco.TextEditor(editor);
      (0, _formatting.activateFormatting)(textEditor);
      (0, _listEditing.activateListEditing)(textEditor);
      (0, _completion.activateCompletion)(textEditor);
      (0, _tableFormatter.activateTableFormatter)(textEditor); // Allow `*` in word pattern for quick styling

      (0, _vscodeMonaco.setWordDefinitionFor)(textEditor.languageId, /(-?\d*\.\d\w*)|([^\!\@\#\%\^\&\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s\，\。\《\》\？\；\：\‘\“\’\”\（\）\【\】\、]+)/g);
    }
  }]);

  return MonacoMarkdownExtension;
}();

exports.MonacoMarkdownExtension = MonacoMarkdownExtension;
(0, _markdown.activateMarkdownMath)();